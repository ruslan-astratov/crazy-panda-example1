{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","postsFromFetch","postsFromFetchCopy","isSorted","inputValue","countOfElementsInTable","pages","currentPage","handleClickOnPaginationItem","num","setState","console","log","handleClickSorted","handleInputChange","e","target","value","fetch","then","responseBody","json","jsArr","countOfPages","Math","floor","length","pagesCopy","slice","i","push","arrayIncludeFiftyElements","this","sort","reverse","filter","obj","body","includes","String","id","className","type","placeholder","onChange","onClick","map","elem","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA4KeA,E,4MAnKbC,MAAQ,CAENC,eAAgB,GAEhBC,mBAAoB,GAEpBC,UAAU,EAEVC,WAAY,GAEZC,uBAAwB,GAExBC,MAAO,GAEPC,YAAa,G,EAmCfC,4BAA8B,SAACC,GAC7B,EAAKC,SAAS,CAAEH,YAAaE,IAAO,WAClCE,QAAQC,IAAK,EAAKZ,W,EAMtBa,kBAAoB,WAClB,EAAKH,SAAS,CAAEP,UAAW,EAAKH,MAAMG,Y,EAMxCW,kBAAoB,SAACC,GACnB,EAAKL,SAAS,CAAEN,WAAYW,EAAEC,OAAOC,S,uDA9CvC,WAAqB,IAAD,OAElBC,MAAM,8CACHC,MAAM,SAAAC,GAAY,OAAIA,EAAaC,UACnCF,MAAM,SAAAG,GAAK,OAAI,EAAKZ,SAAU,CAAET,eAAgBqB,IAAS,WAExD,EAAKZ,SAAS,CAAER,mBAAoBoB,IASpC,IAJA,IAAIC,EAAgBC,KAAKC,MAAOH,EAAMI,OAAS,EAAK1B,MAAMK,wBAEtDsB,EAAY,EAAK3B,MAAMM,MAAMsB,QAExBC,EAAI,EAAGA,GAAKN,EAAcM,IACjCF,EAAUG,KAAKD,GAGjB,EAAKnB,SAAS,CAAEJ,MAAOqB,IAAa,WAClChB,QAAQC,IAAI,qDAAc,EAAKZ,kB,oBAmCvC,WAAU,IAAD,OAGH+B,EAA4BC,KAAKhC,MAAMC,eAAe2B,MAAQI,KAAKhC,MAAMK,uBAAyB2B,KAAKhC,MAAMO,YAAgByB,KAAKhC,MAAMK,uBAA2B2B,KAAKhC,MAAMK,uBAAyB2B,KAAKhC,MAAMO,aAuBtN,OARAwB,GAVEA,GADyB,IAAxBC,KAAKhC,MAAMG,SACgB4B,EAA0BE,OAI1BF,EAA0BG,WAMFC,QAAQ,SAAAC,GAC5D,OAAOA,EAAIC,KAAKC,SAAS,EAAKtC,MAAMI,aAAemC,OAAOH,EAAII,IAAIF,SAAS,EAAKtC,MAAMI,eAQtF,sBAAKqC,UAAU,MAAf,UACE,uBAAOxB,MAAOe,KAAKhC,MAAMI,WAAYqC,UAAU,eAAeC,KAAK,SAASC,YAAY,6HAAyBC,SAAUZ,KAAKlB,oBAEhI,sBAAK2B,UAAU,QAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,qBAAqBI,QAASb,KAAKnB,kBAAjD,gBACA,oBAAI4B,UAAU,qBAAqBI,QAASb,KAAKnB,kBAAjD,qBAGF,oBAAI4B,UAAU,aAAd,SAEIT,KAAKhC,MAAMC,eAAeyB,OAAS,GAEnCK,EAA0Be,KAAK,SAAAC,GAE7B,OAAO,qBAAkBN,UAAU,YAA5B,UACL,sBAAMA,UAAU,oBAAhB,SAAqCM,EAAKP,KAC1C,sBAAMC,UAAU,oBAAhB,SAAqCM,EAAKV,SAF5BU,EAAKP,YA+B7B,qBAAKC,UAAU,aAAf,SACGT,KAAKhC,MAAMM,MAAMoB,OAAS,GAEzBM,KAAKhC,MAAMM,MAAMwC,KAAK,SAAAC,GACpB,OAAO,qBAAKN,UAAY,EAAKzC,MAAMO,cAAgBwC,EAAQ,yCAA2C,kBAAsBF,QAAS,kBAAK,EAAKrC,4BAA4BuC,IAApK,SAA4KA,gB,GAzJ/KC,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5832f2df.chunk.js","sourcesContent":["\nimport React from \"react\"\n// import logo from './logo.svg';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  state = {\n\n    postsFromFetch: [],\n\n    postsFromFetchCopy: [],\n\n    isSorted: true,\n\n    inputValue: \"\",\n\n    countOfElementsInTable: 50,\n\n    pages: [],                  // здесь будет количество контролов - пагинации,\n\n    currentPage: 1,             // текущая страница. По-умолчанию, мы на первой странице\n  }\n\n\n  // Делаем фетч-запрос \n  componentDidMount() {\n\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then( responseBody => responseBody.json() )\n      .then( jsArr => this.setState( { postsFromFetch: jsArr }, ()=> {\n\n        this.setState({ postsFromFetchCopy: jsArr })\n\n\n\n\n        let countOfPages =  Math.floor( jsArr.length / this.state.countOfElementsInTable)\n\n        let pagesCopy = this.state.pages.slice()\n\n        for( let i = 1; i <= countOfPages; i++ ) {\n          pagesCopy.push(i)\n        }\n\n        this.setState({ pages: pagesCopy }, ()=> {\n          console.log(\"Наш стейт \", this.state)\n\n        })\n\n      } ) )\n\n  }\n\n\n  // Когда кликаем на пагинацию, желая посмотреть выборку других 50-ти элементов\n  handleClickOnPaginationItem = (num)=> {\n    this.setState({ currentPage: num }, ()=> {\n      console.log( this.state )\n    })\n  }\n\n\n  // Сортируем \n  handleClickSorted = ()=> {\n    this.setState({ isSorted: !this.state.isSorted })\n  }\n\n\n\n  // При вводе в инпут производим фильтрацию \n  handleInputChange = (e)=> {\n    this.setState({ inputValue: e.target.value })\n  }\n\n\n\n\n\n\n\n  render() {\n\n    // Создаю массив, состоящий из 50-ти элементов, которые я выведу на экран, в таблицу\n    let arrayIncludeFiftyElements = this.state.postsFromFetch.slice( (this.state.countOfElementsInTable * this.state.currentPage) - (this.state.countOfElementsInTable ) , this.state.countOfElementsInTable * this.state.currentPage )\n\n\n    // Сортируем \n    if(this.state.isSorted === true) {\n      arrayIncludeFiftyElements = arrayIncludeFiftyElements.sort()\n    }\n\n    else {\n      arrayIncludeFiftyElements = arrayIncludeFiftyElements.reverse()\n    }\n\n\n\n    // Фильтруем по введённым словам\n    arrayIncludeFiftyElements = arrayIncludeFiftyElements.filter( obj => {\n      return obj.body.includes(this.state.inputValue) || String(obj.id).includes(this.state.inputValue)\n    })\n\n\n\n\n\n    return (\n      <div className=\"App\">\n        <input value={this.state.inputValue} className=\"search-input\" type=\"search\" placeholder=\"Введите ключевое слово\" onChange={this.handleInputChange}/>\n\n        <div className=\"table\">\n          <div className=\"table-head\">\n            <h3 className=\"table-head-capture\" onClick={this.handleClickSorted}>id</h3>\n            <h3 className=\"table-head-capture\" onClick={this.handleClickSorted}>name</h3>\n          </div>\n\n          <ul className=\"table-body\">\n\n            { this.state.postsFromFetch.length > 0 && (\n\n              arrayIncludeFiftyElements.map( elem => {\n\n                return <li key={elem.id} className=\"table-row\">\n                  <span className=\"table-cell-in-row\">{elem.id}</span>\n                  <span className=\"table-cell-in-row\">{elem.body}</span>\n                </li>\n\n              })\n\n            )}\n\n\n\n\n\n\n            {/* { this.state.postsFromFetch.length > 0 && (\n\n            this.state.postsFromFetch.slice( (this.state.countOfElementsInTable * this.state.currentPage) - (this.state.countOfElementsInTable ) , this.state.countOfElementsInTable * this.state.currentPage ).map( elem => {\n\n              return <li key={elem.id} className=\"table-row\">\n                <span className=\"table-cell-in-row\">{elem.id}</span>\n                <span className=\"table-cell-in-row\">{elem.body}</span>\n              </li>\n\n            })\n\n            )} */}\n\n          </ul>\n\n        </div>\n\n        <div className=\"pagination\">\n          {this.state.pages.length > 0 && (\n\n            this.state.pages.map( elem => {\n              return <div className={ this.state.currentPage === elem ?  \"pagination-item active-pagination-item\" : \"pagination-item\" }   onClick={()=> this.handleClickOnPaginationItem(elem)}>{elem}</div>\n            } )\n\n          )}\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}